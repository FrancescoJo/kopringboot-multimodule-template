import org.jetbrains.kotlin.gradle.dsl.JvmTarget

apply from: "$project.rootDir/gradle/scripts/testFailAggregation.gradle"

buildscript {
    ext {
        // first-party dependencies
        version_app_lib = "1.0.0"
        version_app = "1.0.0"

        // lang
        version_target_jvm = 21
        version_kotlin = "2.2.0"
        version_kotlin_coroutines = "1.10.0"
        version_jakarta_validation = "3.0.2"
        version_jakarta_inject = "2.0.1"
        version_groovy = "4.0.22"
        version_spock = "2.4-M4-groovy-4.0"
        version_spock_bytebuddy = "1.14.19"
        version_spock_objenesis = "3.4"

        // Spring + infrastructure
        version_springBoot = "3.3.2"
        version_hikariCP = "5.0.1"
        version_mariadb = "3.1.0"
        version_h2database = "2.1.214"

        // third-party dependencies
        version_slf4j = "2.0.0"
        version_jdsl = "3.0.1"
        version_jackson = "2.17.2"
        version_hypersistence_tsid = "2.1.2"

        // Testing & Code quality
        version_detekt = "1.23.8"
        version_junit5 = "5.9.0"
        version_kotest = "5.5.4"
        version_mockito = "4.4.0"
        version_mockitoKotlin = "4.0.0"
        version_javaFaker = "1.0.2"
        version_testcontainers = "1.17.3"
        version_restDocs = "2.0.6.RELEASE"
    }

    repositories {
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://repo.spring.io/plugins-release" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"

        // Spring
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$version_springBoot"
        // https://kotlinlang.org/docs/reference/compiler-plugins.html
        classpath "org.jetbrains.kotlin:kotlin-allopen:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$version_kotlin"

        // Testing & Code quality
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$version_detekt"
    }
}

group = "com.github.francescojo"

allprojects {
    pluginManager.apply("java")
    pluginManager.apply("idea")
    apply from: "$rootDir/gradle/scripts/java.gradle"
    apply from: "$rootDir/gradle/scripts/kotlin.gradle"
    apply from: "$rootDir/gradle/scripts/detekt.gradle"
    apply from: "$rootDir/gradle/scripts/testing.gradle"
    apply from: "$rootDir/gradle/scripts/testing-large.gradle"

    /*
     * Configure Kotlin compilation settings. We can't move this to the `kotlin.gradle` script
     * since the namespace resolution does not work correctly in imported scripts.
     */
    kotlin {
        compilerOptions {
            allWarningsAsErrors.set(true)
            jvmTarget.set(JvmTarget.fromTarget("$version_target_jvm".toString()))
        }
    }

    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    ext {
        def MODULE_COMMON_LIBS = "common-libs-backend"

        def moduleRef = { String module -> "$MODULE_COMMON_LIBS:$module".toString() }

        MODULE_COMMON_LIBS_FOUNDATION = moduleRef("foundation")
        MODULE_COMMON_LIBS_JACKSON = moduleRef("jacksonConfig")
        MODULE_COMMON_LIBS_SERVER_WEB_API = moduleRef("serverWebApi")
        MODULE_COMMON_LIBS_SPRING_WEBMVC = moduleRef("springWebMvc")
    }
    ext.getArchiveName = { String suffix = "" ->
        if (project == rootProject) {
            return "${project.name}${suffix}"
        }
        def pathParts = project.path.split(':').findAll { it != '' }
        if (pathParts.size() >= 2) {
            return "${pathParts[0]}_${pathParts[1]}${suffix}"
        }
        return "${project.name}${suffix}"
    }

    // Centeralise archivesBaseName for all projects to avoid JAR duplication
    if (project != rootProject) {
        def pathParts = project.path.split(':').findAll { it != '' }
        if (pathParts.size() >= 2) {
            base {
                archivesName = getArchiveName()
            }
        }
    }
}
